'''
N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 
이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 
프로그램을 작성하시오. 
한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 
다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.

최소칸수 ->  최단 경로
bfs
'''


from collections import deque

# BFS 함수 정의
def bfs(maze, N, M):
    # 상, 하, 좌, 우로 이동하기 위한 방향 벡터 정의
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    # 방문할 위치를 담을 큐
    queue = deque([(0, 0)])  # 시작점 (0, 0) 큐에 삽입
    
    while queue:
        x, y = queue.popleft()  # 큐에서 가장 앞에 있는 좌표 꺼내기
        
        # 4방향 탐색
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            
            # 미로 범위 안에 있고, 이동할 수 있는 1인 칸이어야 함
            if 0 <= nx < N and 0 <= ny < M and maze[nx][ny] == 1:
                # 새로운 위치로 이동할 수 있으므로, 이전 경로까지의 거리 + 1
                maze[nx][ny] = maze[x][y] + 1
                queue.append((nx, ny))  # 이동한 위치를 큐에 삽입
    
    # 도착 위치(N-1, M-1)의 값이 최단 거리
    return maze[N-1][M-1]

# 입력 받기
N, M = map(int, input().split())
maze = [list(map(int, input())) for _ in range(N)]

# BFS를 사용하여 최소 칸 수 출력
print(bfs(maze, N, M))
